/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapps;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mylibs.Data;
import mylibs.Invoice;
import mylibs.Lot;

/**
 *
 * @author DESKTOP
 */
public class InvoiceUI extends javax.swing.JFrame {

    private Lot lot;
    private ManageLotGUI mainGUI;
    private ArrayList<Lot> lots;
    private String username;
    
   
    public InvoiceUI(String username) {
        initComponents();
        this.username = username;
        lots = new ArrayList<>();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); 
        setLocationRelativeTo(null); // Center the form on the screen
        pack(); // Pack the components to their preferred sizes
        displayInvoices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backbtn = new javax.swing.JButton();
        greetingUser = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoicestable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        backbtn.setBackground(new java.awt.Color(204, 204, 255));
        backbtn.setFont(new java.awt.Font("Berlin Sans FB", 1, 24)); // NOI18N
        backbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/logout_logo.png"))); // NOI18N
        backbtn.setText(" Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        greetingUser.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        greetingUser.setForeground(new java.awt.Color(255, 255, 255));
        greetingUser.setText("Invoices");

        invoicestable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction ID", "Block Number", "Lot Number", "Username", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoicestable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoicestableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(invoicestable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Double Click to View Invoice Details");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(greetingUser, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(greetingUser)
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(backbtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        CustomerUI customerUI = new CustomerUI(username); // Pass the welcome text back to CustomerUI
        customerUI.setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed

    private void invoicestableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoicestableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            
            int selectedRow = invoicestable.getSelectedRow();

            // Extract blocknum and lotnum as integers from the selected row
            String documentID = invoicestable.getValueAt(selectedRow, 0).toString();

            
            Invoice selectedInvoice = Data.chosenInvoice(documentID);
            this.dispose(); 
            Payment pay = new Payment(username, selectedInvoice, this);
            pay.setVisible(true);
        }

    }//GEN-LAST:event_invoicestableMouseClicked

    public void displayInvoices() {                                              
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) invoicestable.getModel();
    model.setRowCount(0); // Clear the table

    if (!Data.invoices.isEmpty()) {
        boolean hasInvoices = false;

        // Loop through the invoices to add the unsold (pending) ones for the given username
        for (Invoice invoice : Data.invoices) {
            // Check if the username matches the invoice's username
            if (username.equalsIgnoreCase(invoice.getUsername())) {
                boolean isLotSold = false;
                Lot foundLot = null;

                // Check corresponding lot status (sold or pending)
                for (Lot lot : Data.lots) {
                    if (lot.getBlock() == invoice.getBlockNumber() && lot.getLotNumber() == invoice.getLotNumber()) {
                        foundLot = lot; // Store the found lot
                        if (lot.getStatus().equalsIgnoreCase("Sold")) {
                            isLotSold = true; // Mark as sold
                            break; // No need to check further if sold
                        }
                    }
                }

                // If the lot is found and its status is "Pending", add the invoice to the table
                if (!isLotSold && foundLot != null && foundLot.getStatus().equalsIgnoreCase("Pending")) {
                    Object[] rowData = {
                        invoice.getDocumentID(),
                        invoice.getBlockNumber(),
                        invoice.getLotNumber(),
                        invoice.getUsername(),
                        invoice.getDate(),
                        foundLot.getStatus() // Show "Pending" status in the table
                    };
                    model.addRow(rowData); // Add the invoice to the table
                    hasInvoices = true;
                }
            }
        }

            // If no invoices with pending lots were found, show a message
            if (!hasInvoices) {
                JOptionPane.showMessageDialog(this, "No pending invoices available for your account.");
            }
        } else {
            // Show a message if no invoices exist in the system
            JOptionPane.showMessageDialog(this, "No invoice information available.");
        }
    }
    
    public void refreshInvoiceTable(String username) {
        displayInvoices();
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbtn;
    private javax.swing.JLabel greetingUser;
    private javax.swing.JTable invoicestable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
