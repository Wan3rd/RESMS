/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myapps;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mylibs.Data;
import myapps.ManageLotGUI;
import mylibs.Lot;
/**
 *
 * @author DESKTOP
 */
public class viewLots extends javax.swing.JFrame {

    private Lot lot;
    private ManageLotGUI mainGUI;
    private ArrayList<Lot> lots;
     private String username;
    
    public viewLots(String username) {
        lots = new ArrayList<>();
        initComponents();
        this.username = username;
        displayLots();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); 
        setLocationRelativeTo(null); // Center the form on the screen
        pack(); // Pack the components to their preferred sizes
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        Panel = new javax.swing.JPanel();
        greetingUser = new javax.swing.JLabel();
        backbtn = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewlots = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        minsizefield = new javax.swing.JTextField();
        maxsizefield = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        minpricefield = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        maxpricefield = new javax.swing.JTextField();
        searchbtn = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        greetingUser.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        greetingUser.setText("View Lots");

        backbtn.setBackground(new java.awt.Color(204, 204, 255));
        backbtn.setFont(new java.awt.Font("Berlin Sans FB", 1, 24)); // NOI18N
        backbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/logout_logo.png"))); // NOI18N
        backbtn.setText(" Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        searchField.setFont(new java.awt.Font("Perpetua", 0, 24)); // NOI18N
        searchField.setForeground(new java.awt.Color(153, 153, 153));
        searchField.setText(" Search...");
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFieldFocusLost(evt);
            }
        });
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        viewlots.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Block Number", "Lot Number", "Size (sqm)", "Price (Php)", "Status", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(viewlots);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("FILTERS");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Size(sqm)");

        jLabel3.setText("Minimum:");

        jLabel4.setText("Maximum:");

        minsizefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minsizefieldActionPerformed(evt);
            }
        });

        maxsizefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxsizefieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Price(Php)");

        jLabel6.setText("Minimum:");

        minpricefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minpricefieldActionPerformed(evt);
            }
        });

        jLabel7.setText("Maximum:");

        maxpricefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxpricefieldActionPerformed(evt);
            }
        });

        searchbtn.setText("Search");
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(greetingUser, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(253, 253, 253)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(PanelLayout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(18, 18, 18)
                                            .addComponent(minsizefield, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)
                                        .addGroup(PanelLayout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(18, 18, 18)
                                            .addComponent(maxsizefield))
                                        .addComponent(jLabel5)
                                        .addGroup(PanelLayout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(18, 18, 18)
                                            .addComponent(minpricefield, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(PanelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(maxpricefield, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(searchbtn)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(greetingUser)
                .addGap(25, 25, 25)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(minsizefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(maxsizefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(minpricefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxpricefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addComponent(searchbtn)))
                .addGap(26, 26, 26)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backbtn)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        CustomerUI customerUI = new CustomerUI(username); // Pass the welcome text back to CustomerUI
        customerUI.setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        String searchQuery = searchField.getText().toLowerCase(); // Get the search query and convert to lowercase for case-insensitive search
        filterLots(searchQuery); // Call method to filter lots
    }//GEN-LAST:event_searchFieldKeyReleased

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusLost
        if(searchField.getText().equals("")){
            searchField.setText(" Search...");
            searchField.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_searchFieldFocusLost

    private void searchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusGained
        if(searchField.getText().equals(" Search...")){
            searchField.setText("");
            searchField.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_searchFieldFocusGained

    private void maxsizefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxsizefieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxsizefieldActionPerformed

    private void minsizefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minsizefieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_minsizefieldActionPerformed

    private void minpricefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minpricefieldActionPerformed

    }//GEN-LAST:event_minpricefieldActionPerformed

    private void maxpricefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxpricefieldActionPerformed

    }//GEN-LAST:event_maxpricefieldActionPerformed

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        // TODO add your handling code here:
        String minSizeText = minsizefield.getText();
        String maxSizeText = maxsizefield.getText();
        String minPriceText = minpricefield.getText();
        String maxPriceText = maxpricefield.getText();
        
  

    // Call filterLots with the values from fields
    filterLotsSizePrice(minSizeText, maxSizeText, minPriceText, maxPriceText);

        // Call filterLots with the values from fields
        filterLotsSizePrice(minSizeText, maxSizeText, minPriceText, maxPriceText);
    }//GEN-LAST:event_searchbtnActionPerformed

    
    
    private void displayLots() {                                              
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) viewlots.getModel();
        model.setRowCount(0); // Reset table

        if (!Data.lots.isEmpty()) {
            // Loop through the ArrayList of lots and add each lot as a row in the table
            for (Lot lot : Data.lots)
            {
                Object[] rowData =
                {
                    lot.getBlock(),     // Block Number
                    lot.getLotNumber(), // Lot Number
                    lot.getSize(),      // Size in sqm
                    lot.getPrice(),     // Price in PHP
                    lot.getStatus(),      // Status
                    lot.getLocation()
                };
                model.addRow(rowData); // Add row to table
      
            }
        } else
        {
            // Show a message if no lots are added yet
            JOptionPane.showMessageDialog(this, "No lot information available. Please add a lot first.");
        }
    }
    
    private void filterLots(String query) {
    DefaultTableModel model = (DefaultTableModel) viewlots.getModel();
    model.setRowCount(0); // Clear the current rows in the table

    // Loop through the list of lots and add rows that match the query
    for (Lot lot : Data.lots) {
        if (lotMatchesSearch(lot, query)) {
            Object[] rowData = {
                lot.getBlock(),     // Block Number
                lot.getLotNumber(), // Lot Number
                lot.getSize(),      // Size in sqm
                lot.getPrice(),     // Price in PHP
                lot.getStatus(),    // Status
                lot.getLocation()   // Location
            };
            model.addRow(rowData); // Add matching lot to the table
        }
    }
}

// Helper method to check if a lot matches the search query
    private boolean lotMatchesSearch(Lot lot, String query) 
    {
        // Convert all attributes to strings and check if any of them contain the search query
        return String.valueOf(lot.getBlock()).contains(query)  // Convert block number to string
            || String.valueOf(lot.getLotNumber()).contains(query)  // Convert lot number to string
            || String.valueOf(lot.getSize()).contains(query)  // Convert size to string
            || String.valueOf(lot.getPrice()).contains(query)  // Convert price to string
            || lot.getStatus().toLowerCase().contains(query)  // Status is likely already a string
            || lot.getLocation().toLowerCase().contains(query);  // Location is likely already a string
    }
    
    
    private void filterLotsSizePrice(String minSizeText, String maxSizeText, String minPriceText, String maxPriceText) {
    DefaultTableModel model = (DefaultTableModel) viewlots.getModel();
    model.setRowCount(0); // Clear the current rows in the table

    // Parse size inputs
    int minSize = minSizeText.isEmpty() ? Integer.MIN_VALUE : Integer.parseInt(minSizeText);
    int maxSize = maxSizeText.isEmpty() ? Integer.MAX_VALUE : Integer.parseInt(maxSizeText);

    // Parse price inputs
    int minPrice = minPriceText.isEmpty() ? Integer.MIN_VALUE : Integer.parseInt(minPriceText);
    int maxPrice = maxPriceText.isEmpty() ? Integer.MAX_VALUE : Integer.parseInt(maxPriceText);

    // Loop through the list of lots and add rows that match the size/price criteria
    for (Lot lot : Data.lots) {
        boolean matchesSize = (minSizeText.isEmpty() && maxSizeText.isEmpty()) || isSizeInRange(lot, minSize, maxSize);
        boolean matchesPrice = (minPriceText.isEmpty() && maxPriceText.isEmpty()) || isPriceInRange(lot, minPrice, maxPrice);

        // Add to the table if it matches either the size or price criteria
        if (matchesSize || matchesPrice) {
            Object[] rowData = {
                lot.getBlock(),     // Block Number
                lot.getLotNumber(), // Lot Number
                lot.getSize(),      // Size in sqm
                lot.getPrice(),     // Price in PHP
                lot.getStatus(),    // Status
                lot.getLocation()   // Location
            };
            model.addRow(rowData); // Add matching lot to the table
        }
    }
}


    // Helper method to check if the lot's size is within the specified range
    private boolean isSizeInRange(Lot lot, int minSize, int maxSize) {
        double size = lot.getSize(); // Assuming size is a double
        return size >= minSize && size <= maxSize;
    }

    // Helper method to check if the lot's price is within the specified range
    private boolean isPriceInRange(Lot lot, int minPrice, int maxPrice) {
        double price = lot.getPrice(); // Assuming price is a double; if it's an int, adjust accordingly
        return price >= minPrice && price <= maxPrice;
    }

    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel;
    private javax.swing.JButton backbtn;
    private javax.swing.JLabel greetingUser;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField maxpricefield;
    private javax.swing.JTextField maxsizefield;
    private javax.swing.JTextField minpricefield;
    private javax.swing.JTextField minsizefield;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton searchbtn;
    private javax.swing.JTable viewlots;
    // End of variables declaration//GEN-END:variables
}
